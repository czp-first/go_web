// 8.3 REST
// RESTful，是目前最为流行的一种互联网软件架构。因为它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多的网站的采用。

// 什么是REST
// REST(REpresentational State Transfer)这个概念，首次出现是在2000年的Roy Thomas Fielding(他是HTTP规范主要编写者之一)的博士论文中，它指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful的
// 要理解什么是REST，需要理解下面几个概念：
//	资源(Resources) REST是"表现层状态转化"，其实它省略了主语。"表现层"其实指的是"资源"的"表现层"
//	那么什么资源呢？就是平常上网访问的一张图片、一个文档、一个视频。这些资源通过URI来定位，也就是一个URI表示一个资源
//	表现层(Representation)
//	资源是做一个具体的实体信息，它可以有多种的展现形式。而把实体展现出来就是表现层，例如一个txt文本信息，它可以输出成html、json、xml等格式，一个图片可以jpg、png等方式展现，这个就是表现层的意思
//	URI确定一个资源，但是如何确定它的具体表现形式呢？应该在HTTP请求的头部信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述
//	状态转化(State Transfer)
//	访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，肯定涉及到数据和状态的变化。而HTTP协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，肯定要通过某种方式来通知它
//	客户端能通知服务器端的手段，只能是HTTP协议。具体来说，就是在HTTP协议里面，四个表示操作方式的动词: GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源(也可以用于更新资源), PUT用来更新资源，DELETE用来删除资源
// 综合上面的解释，总结一下什么是RESTful架构
//	1. 每一个URI代表一种资源
//	2. 客户端和服务器之间，传递这种资源的某种表现层
//	3. 客户端通过四个HTTP动词，对服务器端资源进行操作，实现“表现层状态转化”
// Web应用要满足REST重要的原则是:客户端和服务器之间的交互是无状态的，即从客户端到服务端的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外此请求可以由任何可用服务器回答，这十分适合云计算之类的环境。因为是无状态的，所以客户端可以缓存数据以改进性能。
// 另一个重要的REST原则是系统的分层，这表示组件无法了解除了与它直接交互的层次以外的组件。通过将系统知识限制在单个层，可以限制整个系统的复杂性，从而促进了底层的独立性

// RESTful的实现
// go没有为REST提供直接的支持，但是因为RESTful是基于HTTP协议实现的，所以可以利用net/http包来自己实现，当然需要针对REST做一些改造，REST是根据不同的method来处理相应的资源，目前已经存在的很多自称是REST的应用，其实并没有真正的实现REST
// 在应用开发的时候也不一定全部按照RESTful的规则全部实现他的方式。因为有时候完全按照RESTful的方式未必是可行的，RESTful服务充分利用每一个HTTP方法，包括DELETE和PUT。可有时，HTTP客户端只能发出GET和POST请求
//	HTML标准只能通过链接和表单支持GET和POST。在没有Ajax支持的网页浏览器中不能发出PUT或DELETE命令
//	有些防火墙会挡住HTTP PUT和DELETE请求要绕过这个限制，客户端需要把实际的PUT和DELTE请求通过POST请求穿透过来。RESTful服务则要负责在收到的POST请求中找到原始的HTTP方法并还原
// 现在可以通过POST里面增加隐藏字段_method这种方式可以用来模拟PUT、DELETE等方式，但是服务器端需要做转换。作者现在的项目里面就按照这种方式来做的REST接口。当然go里面完全按照RESTful来实现是很容易的，通过下面的例子来说明如何实现RESTful的应用设计
// rest.go
// 上面的代码演示了如何编写一个REST的应用，我们访问的资源是用户，通过不同的method来访问不同的函数，这里使用了第三方库github.com/drone/routes，在前面的章节中介绍过如何实现自定义的路由器，这个库实现了自定义路由和方便的路由规则映射，通过它，可以很方便的实现REST的架构。通过上面的代码可知，REST就是根据不同的method访问同一个资源的时候实现不同的逻辑处理






















